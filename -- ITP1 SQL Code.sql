-- ITP1 SQL Code

-- To create LEVELS, QUESTIONS, and ANSWER tables:
CREATE TABLE Levels (
    levelID INT PRIMARY KEY,
    level VARCHAR(50)
);

CREATE TABLE Questions (
    questionID INT PRIMARY KEY,
    levelID INT,
    question VARCHAR(300),
    FOREIGN KEY (levelID) REFERENCES Levels(levelID)
);

CREATE TABLE Answers (
    answerID INT AUTO_INCREMENT PRIMARY KEY,
    questionID INT,
    answer VARCHAR(100),
    answer_character VARCHAR(1), -- e.g., A, B, C, D
    correct BOOLEAN,
    FOREIGN KEY (questionID) REFERENCES Questions(questionID)
);

-- inserting levels, questions and answers into the tables 
INSERT INTO Levels (levelID, level) VALUES 
(1, 'Intro to Python'),
(2, 'Variables and Data Types I'),
(3, 'Variables & Data Types II'),
(4, 'Print Statements'),
(5, 'Operators and Expressions I'),
(6, 'Operators and Expressions II'),
(7, 'Basic String Operators I'),
(8, 'Basic String Operators II'),
(9, 'Basic String Operators III'),
(10, 'Control Flow Conditionals I'),
(11, 'Control Flow Conditionals II'),
(12, 'While Loops'),
(13, 'For Loops'),
(14, 'Loop Control'),
(15, 'Functions I'),
(16, 'Functions II'),
(17, 'List Operations I'),
(18, 'List Operations II'),
(19, 'List Operations III'),
(20, 'Tuples and Sets I'),
(21, 'Tuples and Sets II'),
(22, 'Dictionaries and Dictionary Methods I'),
(23, 'Dictionaries and Dictionary Methods II'),
(24, 'Dictionaries and Dictionary Methods III'),
(25, 'Functions I'),
(26, 'Functions II'),
(27, 'Functions III');

INSERT INTO Questions (questionID, levelID, question)
VALUES 
(1, 1, 'What is the correct file extension for a Python file?'),
(2, 1, 'Which of the following is the correct way to output text in Python?'),
(3, 1, 'How do you run a Python script from the terminal (assuming your file is named script.py)?'),
(4, 1, 'Which symbol is used to write a comment in Python?'),

(5, 2, 'Which of the following is a valid integer in Python?'),
(6, 2, 'What data type is the value "Hello" in Python?'),
(7, 2, 'What will type(True) return?'),
(8, 2, 'Which of these is a float in Python?'),

(9, 3, 'What is the result of int("5")?'),
(10, 3, 'Which function converts a float to an integer in Python?'),
(11, 3, 'What does str(123) return?'),
(12, 3, 'What happens when you run int("abc")'),

(13, 4, 'What does print("Hello World!") output?'),
(14, 4, 'What will print("3 + 4") output?'),
(15, 4, 'What symbol is used to denote a string inside a print statement?'),
(16, 4, 'Which of the following will print two seperate lines?'),

(17, 5, 'What is the result of (4 + 2 * 3)?'),
(18, 5, 'What does 5 == 5 evaluate to?'),
(19, 5, 'Which operator checks if two values are not equal?'),
(20, 5, 'What is the result of (TRUE and FALSE)?'),

(21, 6, 'What is the result of (2 + 3 * 4)?'),
(22, 6, 'Which of the following operators has the highest precedence?'),
(23, 6, 'In the expression 5 + 3 > 6, what is evaluated first?'),
(24, 6, 'What will (2 * (3 + 4)) evaluate to?'),

(25, 7, 'What is the result of "Hello" + "World"?'),
(26, 7, 'What does "abc" * 3 produce?'),
(27, 7, 'What happens when you try "1" + 1?'),
(28, 7, 'Which of these can concatenate two strings?'),

(29, 8, 'What does "Python"[0] return?'),
(30, 8, 'What does "Python"[-1] return?'),
(31, 8, 'What does "Python"[1:4] return?'),
(32, 8, 'Which index gives the first character in a string?'),

(33, 9, 'What does "hello".upper() return?'),
(34, 9, 'What does "HeLLo".lower() return?'),
(35, 9, 'What does " hello ".strip() return?'),
(36, 9, 'Which method removes whitespace from both ends of a string?'),

(37, 10, 'Which keyword is used for a simple conditional in Python?'),
(38, 10, 'What does if 5 > 2: do?'),
(39, 10, 'What is the purpose of elif?'),
(40, 10, 'What happens if no condition in if-elif-else is true?'),

(41, 11, 'What is a nested conditional in Python?'),
(42, 11, 'Which of the following represents a nested conditional?'),
(43, 11, 'Nested conditionals are used when:'),
(44, 11, 'Which of these best describes good use of nested if statements?'),

(45, 12, 'What is the purpose of a while loop?'),
(46, 12, 'Which of these is a valid while loop header?'),
(47, 12, 'When should you be careful using while loops?'),
(48, 12, 'Which keyword is used to exit a while loop early?'),

(49, 13, 'What does a for loop do in Python?'),
(50, 13, 'Which is a valid for loop header?'),
(51, 13, 'A for loop can be used with:'),
(52, 13, 'What will range(3) produce?'),

(53, 14, 'What does the break statement do in a loop?'),
(54, 14, 'What is the purpose of the continue statement?'),
(55, 14, 'What does the pass statement do?'),
(56, 14, 'Which statement is useful when you are planning to add code later?'),

(57, 15, 'What keyword is used to define a function in Python?'),
(58, 15, 'Which of the following correctly defines a function?'),
(59, 15, 'How do you call a function named greet?'),
(60, 15, 'What is the purpose of a function?'),

(61, 16, 'What is a local variable?'),
(62, 16, 'Which variable is accessible anywhere in the script?'),
(63, 16, 'What happens if a function defines a variable with the same name as a global one?'),
(64, 16, 'What keyword is used to modify a global variable inside a function?'),

(65, 17, 'Which of these defines a list?'),
(66, 17, 'How do you add an item to a list?'),
(67, 17, 'What is the index of the first element in a list?'),
(68, 17, 'How do you change the second element of a list my_list to "new"?'),

(69, 18, 'What is iteration?'),
(70, 18, 'Which is a valid way to iterate through a list?'),
(71, 18, 'In a loop, item refers to:'),
(72, 18, 'What happens if you loop over an empty list?'),

(73, 19, 'What does append() do?'),
(74, 19, 'Which method removes a specific item from a list?'),
(75, 19, 'What does sort() do?'),
(76, 19, 'What does pop() do with a list?'),

(77, 20, 'What is the purpose of set() in Python?'),
(78, 20, 'What does union() do?'),
(79, 20, 'Which method returns common elements between two sets?'),
(80, 20, 'Sets do not allow:'),

(81, 21, 'Which of these is immutable?'),
(82, 21, 'Which type is ordered and allows duplicates?'),
(83, 21, 'Which is the best choice when you need fast membership testing?'),
(84, 21, 'Which of these allows key-value pairs?'),

(85, 22, 'What is a dictionary in Python?'),
(86, 22, 'How do you access a value from a dictionary?'),
(87, 22, 'Which of these creates a dictionary?'),
(88, 22, 'What will my_dict[age] return?'),

(89, 23, 'How do you add a new key-value pair?'),
(90, 23, 'What does update() do?'),
(91, 23, 'How do you delete a key from a dictionary?'),
(92, 23, 'Which method removes a key and returns its value?'),

(93, 24, 'How do you iterate over dictionary keys?'),
(94, 24, 'What does items() return?'),
(95, 24, 'How do you get all the values in a dictionary?'),
(96, 24, 'Which loop gives both key and value?'),

(97, 25, 'What is the purpose of the def keyword in Python?'),
(98, 25, 'Which of the following is the correct way to call a function named my_function()?'),
(99, 25, 'What is the default return value of a function that does not explicitly return anything?'),
(100, 25, 'Which of the following is a valid function definition in Python?'),

(101, 26, 'How do you define a function with parameters in Python?'),
(102, 26, 'Which of the following statements is true about the scope of variables in Python functions?'),
(103, 26, 'What happens if a function call is made with more arguments than the function is defined to accept?'),
(104, 26, 'How do you pass a value to a functions parameter in Python?'),

(105, 27, 'What is the purpose of a return statement in a function?'),
(106, 27, 'What will happen if you call a function with a parameter that has a default value, but you do not provide an argument for it?'),
(107, 27, 'Which of the following is a correct way to define a function that can accept any number of arguments in Python?'),
(108, 27, 'How can you define a function that accepts both positional and keyword arguments?'),

(109, 1, 'What is a string?'),
(110, 1, 'How is a string denoted?'),
(111, 1, 'What is "input()"?'), 
(112, 1, 'How are built in functions referred to?'),

(113, 2, 'Which of the following is a boolean value?'),
(114, 2, 'What is a float?'),
(115, 2, 'How are decimal numbers represented in Python?'),
(116, 2, 'How many boolean values are there in Python?'),

(117, 3, 'Which function is used to convert a string to a float?'),
(118, 3, 'What type does float(7) return?'),
(119, 3, 'What is required to convert a string to an int using int()?'),
(120, 3, 'Which of these values can be passed to int() without error?'),

(121, 4, 'What does the print() function do?'),
(122, 4, 'What is enclosed within quotes in a print statement?'),
(123, 4, 'What does the newline character do in print()?'),
(124, 4, 'Which of the following uses valid syntax for print()?'),

(125, 5, 'Which of the following is a comparison operator?'),
(126, 5, 'What does the expression (3 > 1 and 2 < 5) evaluate to?'),
(127, 5, 'Which operator means "or" in Python?'),
(128, 5, 'What type of value does a comparison operation return?'),

(129, 6, 'In which order are operators evaluated in Python?'),
(130, 6, 'Which of these has lower precedence: addition or multiplication?'),
(131, 6, 'How can you override operator precedence?'),
(132, 6, 'What is evaluated first in 3 + 2 * (1 + 1)?'),

(133, 7, 'What does repeating a string with * do?'),
(134, 7, 'Which operation is invalid between a string and an integer?'),
(135, 7, 'What operator is used to combine two strings?'),
(136, 7, 'What happens if you add two string variables together?'),

(137, 8, 'What index accesses the second character in a string?'),
(138, 8, 'What does slicing a string do?'),
(139, 8, 'Which index accesses the last character of a string?'),
(140, 8, 'What does "Python"[2:] return?'),

(141, 9, 'What does the string method replace() do?'),
(142, 9, 'How does the method startswith() work?'),
(143, 9, 'What will "abc123".isdigit() return?'),
(144, 9, 'Which method converts all characters in a string to lowercase?'),

(145, 10, 'What does an else block do in conditionals?'),
(146, 10, 'How do you write an if statement that checks if a variable x equals 10?'),
(147, 10, 'Can multiple elif statements be used in one conditional structure?'),
(148, 10, 'What will happen if an if statement condition is False and there is no else?'),

(149, 11, 'How do nested if statements improve decision-making in code?'),
(150, 11, 'Is indentation important in nested conditionals?'),
(151, 11, 'Which Python keyword can be nested inside another if block?'),
(152, 11, 'Can nested conditionals be replaced by logical operators sometimes?'),

(153, 12, 'What will happen if a while loop’s condition is initially False?'),
(154, 12, 'How do you ensure a while loop eventually ends?'),
(155, 12, 'What does the continue statement do inside a while loop?'),
(156, 12, 'Which is a common mistake when using while loops?'),

(157, 13, 'How can you use a for loop with a dictionary?'),
(158, 13, 'What does the range function generate when called with two arguments?'),
(159, 13, 'Can a for loop iterate over a string?'),
(160, 13, 'How do you loop over a list and get both index and value?'),

(161, 14, 'What is the effect of a break inside nested loops?'),
(162, 14, 'What happens if continue is used in the last iteration of a loop?'),
(163, 14, 'Why would you use the pass statement in loops?'),
(164, 14, 'Which statement can be used as a placeholder for future code?'),

(165, 15, 'How do you document a function in Python?'),
(166, 15, 'Can functions return more than one value?'),
(167, 15, 'What happens if a function has no parameters?'),
(168, 15, 'How can you call a function with keyword arguments?'),

(169, 16, 'What is the scope of a variable defined inside a function?'),
(170, 16, 'How do you declare a global variable inside a function?'),
(171, 16, 'Can local and global variables have the same name?'),
(172, 16, 'What does the nonlocal keyword do?'),

(173, 17, 'How can you find the length of a list?'),
(174, 17, 'Which method inserts an item at a specific position in a list?'),
(175, 17, 'What will my_list[-1] return?'),
(176, 17, 'How do you create an empty list?'),

(177, 18, 'Which function provides indexes while looping?'),
(178, 18, 'How do you iterate using both index and value?'),
(179, 18, 'What will range(5) produce?'),
(180, 18, 'What is a typical use of a for loop?'),

(181, 19, 'Which method returns the last item and removes it?'),
(182, 19, 'What does reverse() do to a list?'),
(183, 19, 'Which method counts occurrences of an item?'),
(184, 19, 'What does extend() do to a list?'),

(185, 20, 'Which method checks if sets have no elements in common?'),
(186, 20, 'What does intersection_update() do?'),
(187, 20, 'Which operator performs set union?'),
(188, 20, 'How do you remove duplicates from a list using sets?'),

(189, 21, 'Which data structure uses keys and values?'),
(190, 21, 'Which data type is best for ordered, immutable data?'),
(191, 21, 'Which data type does not allow duplicates?'),
(192, 21, 'Which structure keeps insertion order in Python 3.7+?'),

(193, 22, 'How can you get all keys in a dictionary?'),
(194, 22, 'What happens if you try to access a non-existent key directly?'),
(195, 22, 'Which method safely retrieves a value from a dictionary?'),
(196, 22, 'How do you check if a key exists in a dictionary?'),

(197, 23, 'Which method removes all items from a dictionary?'),
(198, 23, 'How do you change the value of a key in a dictionary?'),
(199, 23, 'What does setdefault() do?'),
(200, 23, 'Which statement deletes a key-value pair?'),

(201, 24, 'How do you iterate through all key-value pairs?'),
(202, 24, 'Which method returns dictionary keys?'),
(203, 24, 'How can you get both index and key while looping?'),
(204, 24, 'Which loop syntax gives you values only?'),

(205, 25, 'What is a function in Python?'),
(206, 25, 'Which keyword is used to define a function?'),
(207, 25, 'What is a return statement used for?'),
(208, 25, 'What happens if a function doesn’t have a return statement?'),

(209, 26, 'What happens if a loop condition is always True and no break is used?'),
(210, 26, 'What is an infinite loop?'),
(211, 26, 'Which loop construct is best for iterating over a list?'),
(212, 26, 'Which of the following will exit a loop immediately?'),

(213, 27, 'What is a list comprehension in Python?'),
(214, 27, 'Which of the following is a valid list comprehension?'),
(215, 27, 'What does this return: [x for x in range(3)]?'),
(216, 27, 'What is the benefit of list comprehensions?');

INSERT INTO Answers (questionID, answer, answer_character, correct)
VALUES
(1, '.pt', 'A', FALSE),
(1, '.pyt', 'B', FALSE),
(1, '.py', 'C', TRUE),
(1, '.script', 'D', FALSE),
(2, 'print("Hello World")', 'A', TRUE),
(2, 'echo("Hello World")', 'B', FALSE),
(2, 'say("Hello World")', 'C', FALSE),
(2, 'console.log("Hello World")', 'D', FALSE),
(3, 'python run script.py', 'A', FALSE),
(3, 'run script.py', 'B', FALSE),
(3, 'python script.py', 'C', TRUE),
(3, 'execute script.py', 'D', FALSE),
(4, '//', 'A', FALSE),
(4, '<!--', 'B', FALSE),
(4, '#', 'C', TRUE),
(4, '**', 'D', FALSE),
(5, '5.0', 'A', FALSE),
(5, '"5"', 'B', FALSE),
(5, '5', 'C', TRUE),
(5, 'True', 'D', FALSE),
(6, 'Integer', 'A', FALSE),
(6, 'String', 'B', TRUE),
(6, 'Boolean', 'C', FALSE),
(6, 'Float', 'D', FALSE),
(7, '<class ''int''>', 'A', FALSE),
(7, '<class ''float''>', 'B', FALSE),
(7, '<class ''str''>', 'C', FALSE),
(7, '<class ''bool''>', 'D', TRUE),
(8, '2', 'A', FALSE),
(8, '3.5', 'B', TRUE),
(8, '"3.5"', 'C', FALSE),
(8, 'True', 'D', FALSE),
(9, '"5"', 'A', FALSE),
(9, '5', 'B', TRUE),
(9, '5.0', 'C', FALSE),
(9, 'Error', 'D', FALSE),
(10, 'str()', 'A', FALSE),
(10, 'bool()', 'B', FALSE),
(10, 'float()', 'C', FALSE),
(10, 'int()', 'D', TRUE),
(11, '123', 'A', FALSE),
(11, '"123"', 'B', TRUE),
(11, '1, 2, 3', 'C', FALSE),
(11, 'Error', 'D', FALSE),
(12, 'abc', 'A', FALSE),
(12, 'None', 'B', FALSE),
(12, 'ERROR', 'C', TRUE),
(12, '0', 'D', FALSE),
(13, 'Hello World', 'A', FALSE),
(13, 'Hello World!', 'B', TRUE),
(13, '"Hello World!"', 'C', FALSE),
(13, 'print Hello World!', 'D', FALSE),
(14, '7', 'A', FALSE),
(14, '"7"', 'B', FALSE),
(14, '3 + 4', 'C', TRUE),
(14, 'ERROR', 'D', FALSE),
(15, '#', 'A', FALSE),
(15, '''', 'B', TRUE),
(15, '@', 'C', FALSE),
(15, '&', 'D', FALSE),
(16, 'print("Line 1" + "Line 2")', 'A', FALSE),
(16, 'print("Line 1\nLine 2")', 'B', TRUE),
(16, 'print("line 1 Line 2")', 'C', FALSE),
(16, 'print(Line 1, Line 2)', 'D', FALSE),
(17, '18', 'A', FALSE),
(17, '10', 'B', TRUE),
(17, '24', 'C', FALSE),
(17, '14', 'D', FALSE),
(18, 'True', 'A', TRUE),
(18, 'False', 'B', FALSE),
(18, 'None', 'C', FALSE),
(18, 'ERROR', 'D', FALSE),
(19, '!=', 'A', TRUE),
(19, '<>', 'B', FALSE),
(19, '<=', 'C', FALSE),
(19, '==', 'D', FALSE),
(20, 'False', 'A', TRUE),
(20, 'True', 'B', FALSE),
(20, 'None', 'C', FALSE),
(20, 'ERROR', 'D', FALSE),
(21, '20', 'A', FALSE),
(21, '14', 'B', TRUE),
(21, '24', 'C', FALSE),
(21, '10', 'D', FALSE),
(22, '+', 'A', FALSE),
(22, '-', 'B', FALSE),
(22, '*', 'C', TRUE),
(22, '/', 'D', FALSE),
(23, '>', 'A', FALSE),
(23, '+', 'B', TRUE),
(23, '5 + 3 >', 'C', FALSE),
(23, '6', 'D', FALSE),
(24, '10', 'A', FALSE),
(24, '16', 'B', TRUE),
(24, '12', 'C', FALSE),
(24, '9', 'D', FALSE),
(25, 'HelloWorld', 'A', TRUE),
(25, 'Hello World', 'B', FALSE),
(25, 'Hello+World', 'C', FALSE),
(25, 'Error', 'D', FALSE),
(26, 'abcabcabc', 'A', TRUE),
(26, 'abc3', 'B', FALSE),
(26, 'abc abc abc', 'C', FALSE),
(26, 'Error', 'D', FALSE),
(27, '1 + 1', 'A', FALSE),
(27, '"1" + 1', 'B', TRUE),
(27, '1 + "1"', 'C', FALSE),
(27, 'Error', 'D', FALSE),
(28, '+', 'A', FALSE),
(28, '-', 'B', FALSE),
(28, '*', 'C', TRUE),
(28, '/', 'D', FALSE),
(29, 'P', 'A', TRUE),
(29, 'Y', 'B', FALSE),
(29, 'n', 'C', FALSE),
(29, 'Error', 'D', FALSE),
(30, 'P', 'A', FALSE),
(30, 'n', 'B', TRUE),
(30, 'o', 'C', FALSE),
(30, 'Error', 'D', FALSE),
(31, 'yth', 'A', TRUE),
(31, 'ytho', 'B', FALSE),
(31, 'Pyt', 'C', FALSE),
(31, 'tho', 'D', FALSE),
(32, '-1', 'A', FALSE),
(32, '0', 'B', TRUE),
(32, '1', 'C', FALSE),
(32, 'None', 'D', FALSE),
(33, 'HELLO', 'A', TRUE),
(33, 'hello', 'B', FALSE),
(33, 'Hello', 'C', FALSE),
(33, 'Upper', 'D', FALSE),
(34, 'HELLO', 'A', FALSE),
(34, 'hello', 'B', TRUE),
(34, 'HeLLo', 'C', FALSE),
(34, 'Lower', 'D', FALSE),
(35, 'hello', 'A', TRUE),
(35, ' hello', 'B', FALSE),
(35, 'hello ', 'C', FALSE),
(35, '" hello "', 'D', FALSE),
(36, 'strip()', 'A', TRUE),
(36, 'trim()', 'B', FALSE),
(36, 'remove()', 'C', FALSE),
(36, 'cut()', 'D', FALSE),
(37, 'while', 'A', FALSE),
(37, 'if', 'B', TRUE),
(37, 'loop', 'C', FALSE),
(37, 'do', 'D', FALSE),
(38, 'Prints 5', 'A', FALSE),
(38, 'Executes the next indented block', 'B', TRUE),
(38, 'Errors out', 'C', FALSE),
(38, 'Compares as string', 'D', FALSE),
(39, 'Ends a block', 'A', FALSE),
(39, 'Always runs', 'B', FALSE),
(39, 'Adds another condition', 'C', TRUE),
(39, 'Repeats code', 'D', FALSE),
(40, 'It crashes', 'A', FALSE),
(40, 'The else block runs', 'B', TRUE),
(40, 'All blocks run', 'C', FALSE),
(40, 'Nothing runs', 'D', FALSE),
(41, 'A conditional inside a function', 'A', FALSE),
(41, 'A loop inside an if statement', 'B', FALSE),
(41, 'An if or else statement inside another if', 'C', TRUE),
(41, 'A variable that stores a condition', 'D', FALSE),
(42, 'if x == 5 and y == 10:', 'A', FALSE),
(42, 'if x == 5: if y == 10: print("Yes")', 'B', TRUE),
(42, 'if x == 5 or y == 10:', 'C', FALSE),
(42, 'if x == 5, y == 10:', 'D', FALSE),
(43, 'You need to run code regardless of condition', 'A', FALSE),
(43, 'Multiple variables must be defined', 'B', FALSE),
(43, 'One decision depends on another', 'C', TRUE),
(43, 'You are importing modules', 'D', FALSE),
(44, 'Always use nested conditionals for clarity', 'A', FALSE),
(44, 'Use when one condition needs another to be true', 'B', TRUE),
(44, 'Avoid them; they are not valid in Python', 'C', FALSE),
(44, 'Use them only in for loops', 'D', FALSE),
(45, 'To perform an operation once', 'A', FALSE),
(45, 'To perform repeated tasks until a condition is false', 'B', TRUE),
(45, 'To call functions', 'C', FALSE),
(45, 'To loop through dictionaries', 'D', FALSE),
(46, 'while x > 0:', 'A', TRUE),
(46, 'while (x > 0)', 'B', FALSE),
(46, 'repeat while x > 0', 'C', FALSE),
(46, 'loop x > 0:', 'D', FALSE),
(47, 'When using print statements', 'A', FALSE),
(47, 'When conditions never become false', 'B', TRUE),
(47, 'When declaring functions', 'C', FALSE),
(47, 'When importing libraries', 'D', FALSE),
(48, 'skip', 'A', FALSE),
(48, 'end', 'B', FALSE),
(48, 'break', 'C', TRUE),
(48, 'stop', 'D', FALSE),
(49, 'It defines a function', 'A', FALSE),
(49, 'It executes code while a condition is true', 'B', FALSE),
(49, 'It iterates over a sequence', 'C', TRUE),
(49, 'It checks conditions', 'D', FALSE),
(50, 'for (x in range(5)):', 'A', FALSE),
(50, 'for x to 5:', 'B', FALSE),
(50, 'for x in range(5):', 'C', TRUE),
(50, 'loop x = 0 to 5', 'D', FALSE),
(51, 'Strings', 'A', FALSE),
(51, 'Lists', 'B', FALSE),
(51, 'Ranges', 'C', FALSE),
(51, 'All of the above', 'D', TRUE),
(52, '1, 2, 3', 'A', FALSE),
(52, '0, 1, 2', 'B', TRUE),
(52, '0, 1, 2, 3', 'C', FALSE),
(52, 'Nothing', 'D', FALSE),
(53, 'Skips to the next item', 'A', FALSE),
(53, 'Exits the loop completely', 'B', TRUE),
(53, 'Restarts the loop', 'C', FALSE),
(53, 'Does nothing', 'D', FALSE),
(54, 'Stops the entire program', 'A', FALSE),
(54, 'Exits the loop', 'B', FALSE),
(54, 'Skips the rest of the loop body and goes to the next iteration', 'C', TRUE),
(54, 'Pauses the loop', 'D', FALSE),
(55, 'Skips the loop', 'A', FALSE),
(55, 'Does nothing; its a placeholder', 'B', TRUE),
(55, 'Exits the function', 'C', FALSE),
(55, 'Skips one line', 'D', FALSE),
(56, 'return', 'A', FALSE),
(56, 'skip', 'B', FALSE),
(56, 'pass', 'C', TRUE),
(56, 'break', 'D', FALSE),
(57, 'define', 'A', FALSE),
(57, 'func', 'B', FALSE),
(57, 'def', 'C', TRUE),
(57, 'function', 'D', FALSE),
(58, 'def my_function():', 'A', TRUE),
(58, 'function my_function()', 'B', FALSE),
(58, 'my_function(): def', 'C', FALSE),
(58, 'def: my_function()', 'D', FALSE),
(59, 'call greet()', 'A', FALSE),
(59, 'run greet()', 'B', FALSE),
(59, 'greet()', 'C', TRUE),
(59, 'start greet', 'D', FALSE),
(60, 'To write conditions', 'A', FALSE),
(60, 'To repeat code in loops', 'B', FALSE),
(60, 'To group code that can be reused', 'C', TRUE),
(60, 'To declare variables', 'D', FALSE),
(61, 'A variable defined inside a function', 'A', TRUE),
(61, 'A variable defined outside all functions', 'B', FALSE),
(61, 'A variable from another module', 'C', FALSE),
(61, 'A reserved keyword', 'D', FALSE),
(62, 'Local', 'A', FALSE),
(62, 'Private', 'B', FALSE),
(62, 'Global', 'C', TRUE),
(62, 'Constant', 'D', FALSE),
(63, 'It updates the global one', 'A', FALSE),
(63, 'It causes an error', 'B', FALSE),
(63, 'It creates a new local variable', 'C', TRUE),
(63, 'It deletes the global one', 'D', FALSE),
(64, 'change', 'A', FALSE),
(64, 'override', 'B', FALSE),
(64, 'global', 'C', TRUE),
(64, 'set', 'D', FALSE),
(65, 'list = {}', 'A', FALSE),
(65, 'list = ()', 'B', FALSE),
(65, 'list = []', 'C', TRUE),
(65, 'list = <>', 'D', FALSE),
(66, 'list.add(item)', 'A', FALSE),
(66, 'list.push(item)', 'B', FALSE),
(66, 'list.append(item)', 'C', TRUE),
(66, 'list.insert(item)', 'D', FALSE),
(67, '1', 'A', FALSE),
(67, '0', 'B', TRUE),
(67, '-1', 'C', FALSE),
(67, 'It depends', 'D', FALSE),
(68, 'my_list[2] = "new"', 'A', FALSE),
(68, 'my_list[1] = "new"', 'B', TRUE),
(68, 'my_list[0] = "new"', 'C', FALSE),
(68, 'my_list["2"] = "new"', 'D', FALSE),
(69, 'Changing elements in a list', 'A', FALSE),
(69, 'Repeating actions over items', 'B', TRUE),
(69, 'Copying a list', 'C', FALSE),
(69, 'Sorting items in a list', 'D', FALSE),
(70, 'for item of list:', 'A', FALSE),
(70, 'for list in item:', 'B', FALSE),
(70, 'for item in my_list:', 'C', TRUE),
(70, 'loop item from my_list:', 'D', FALSE),
(71, 'The index number', 'A', FALSE),
(71, 'Each value in the list', 'B', TRUE),
(71, 'The length of the list', 'C', FALSE),
(71, 'A new list', 'D', FALSE),
(72, 'It prints "empty"', 'A', FALSE),
(72, 'It runs once', 'B', FALSE),
(72, 'It throws an error', 'C', FALSE),
(72, 'It does nothing', 'D', TRUE),
(73, 'Removes an element', 'A', FALSE),
(73, 'Sorts the list', 'B', FALSE),
(73, 'Adds an element to the end', 'C', TRUE),
(73, 'Adds two lists', 'D', FALSE),
(74, 'delete()', 'A', FALSE),
(74, 'remove()', 'B', TRUE),
(74, 'pop()', 'C', FALSE),
(74, 'clear()', 'D', FALSE),
(75, 'Sorts the list alphabetically or numerically', 'A', TRUE),
(75, 'Removes duplicate values', 'B', FALSE),
(75, 'Adds items to a new list', 'C', FALSE),
(75, 'Splits the list', 'D', FALSE),
(76, 'Adds an element', 'A', FALSE),
(76, 'Removes the last element and returns it', 'B', TRUE),
(76, 'Empties the list', 'C', FALSE),
(76, 'Sorts it in reverse', 'D', FALSE),
(77, 'To create a tuple', 'A', FALSE),
(77, 'To create an ordered list', 'B', FALSE),
(77, 'To create an unordered collection of unique values', 'C', TRUE),
(77, 'To define constants', 'D', FALSE),
(78, 'Finds common elements', 'A', FALSE),
(78, 'Combines two sets, removing duplicates', 'B', TRUE),
(78, 'Removes elements from both sets', 'C', FALSE),
(78, 'Sorts both sets', 'D', FALSE),
(79, 'join()', 'A', FALSE),
(79, 'merge()', 'B', FALSE),
(79, 'intersection()', 'C', TRUE),
(79, 'duplicate()', 'D', FALSE),
(80, 'Integers', 'A', FALSE),
(80, 'Strings', 'B', FALSE),
(80, 'Duplicate values', 'C', TRUE),
(80, 'Operations', 'D', FALSE),
(81, 'List', 'A', FALSE),
(81, 'Tuple', 'B', TRUE),
(81, 'Set', 'C', FALSE),
(81, 'Dictionary', 'D', FALSE),
(82, 'Set', 'A', FALSE),
(82, 'List', 'B', TRUE),
(82, 'Dictionary', 'C', FALSE),
(82, 'Tuple', 'D', FALSE),
(83, 'List', 'A', FALSE),
(83, 'Tuple', 'B', FALSE),
(83, 'Set', 'C', TRUE),
(83, 'String', 'D', FALSE),
(84, 'Tuple', 'A', FALSE),
(84, 'Set', 'B', FALSE),
(84, 'List', 'C', FALSE),
(84, 'Dictionary', 'D', TRUE),
(85, 'A list of words', 'A', FALSE),
(85, 'An unordered collection of key-value pairs', 'B', TRUE),
(85, 'A set of strings', 'C', FALSE),
(85, 'A function list', 'D', FALSE),
(86, 'dict.value(key)', 'A', FALSE),
(86, 'dict.get(value)', 'B', FALSE),
(86, 'dict[key]', 'C', TRUE),
(86, 'dict -> key', 'D', FALSE),
(87, '{}', 'A', TRUE),
(87, '[]', 'B', FALSE),
(87, '()', 'C', FALSE),
(87, '<>', 'D', FALSE),
(88, 'The key age', 'A', FALSE),
(88, 'The value assigned to age', 'B', TRUE),
(88, 'The entire dictionary', 'C', FALSE),
(88, 'A tuple', 'D', FALSE),
(89, 'dict.add(key, value)', 'A', FALSE),
(89, 'dict[key] = value', 'B', TRUE),
(89, 'dict.push(key, value)', 'C', FALSE),
(89, 'dict.update(key, value)', 'D', FALSE),
(90, 'Adds or modifies key-value pairs', 'A', TRUE),
(90, 'Sorts the dictionary', 'B', FALSE),
(90, 'Removes a key', 'C', FALSE),
(90, 'Clears the dictionary', 'D', FALSE),
(91, 'remove dict[key]', 'A', FALSE),
(91, 'dict.delete(key)', 'B', FALSE),
(91, 'del dict[key]', 'C', TRUE),
(91, 'dict.popall()', 'D', FALSE),
(92, 'pop()', 'A', TRUE),
(92, 'remove()', 'B', FALSE),
(92, 'cut()', 'C', FALSE),
(92, 'pull()', 'D', FALSE),
(93, 'for key in dict:', 'A', TRUE),
(93, 'for dict in key:', 'B', FALSE),
(93, 'loop key from dict', 'C', FALSE),
(93, 'dict.forEach()', 'D', FALSE),
(94, 'A list of keys', 'A', FALSE),
(94, 'A list of values', 'B', FALSE),
(94, 'A list of key-value pairs', 'C', TRUE),
(94, 'A sorted dictionary', 'D', FALSE),
(95, 'dict.getall()', 'A', FALSE),
(95, 'dict.values()', 'B', TRUE),
(95, 'dict.keyvalues()', 'C', FALSE),
(95, 'dict.pairs()', 'D', FALSE),
(96, 'for key in dict:', 'A', FALSE),
(96, 'for key, value in dict.items():', 'B', TRUE),
(96, 'for item in dict.values():', 'C', FALSE),
(96, 'for item in dict.keys():', 'D', FALSE),
(97, 'To define a variable', 'A', FALSE),
(97, 'To define a function', 'B', TRUE),
(97, 'To create a loop', 'C', FALSE),
(97, 'To print a statement', 'D', FALSE),
(98, 'my_function[]', 'A', FALSE),
(98, 'my_function()', 'B', TRUE),
(98, 'call my_function()', 'C', FALSE),
(98, 'invoke my_function()', 'D', FALSE),
(99, 'None', 'A', TRUE),
(99, '0', 'B', FALSE),
(99, 'False', 'C', FALSE),
(99, '(empty string)', 'D', FALSE),
(100, 'function my_function():', 'A', FALSE),
(100, 'def my_function():', 'B', TRUE),
(100, 'func my_function()', 'C', FALSE),
(100, 'define my_function()', 'D', FALSE),
(101, 'def function_name:', 'A', FALSE),
(101, 'def function_name(parameter):', 'B', TRUE),
(101, 'def function_name(parameter())', 'C', FALSE),
(101, 'function function_name(parameter)', 'D', FALSE),
(102, 'Variables defined inside a function are global', 'A', FALSE),
(102, 'Variables defined inside a function are local to that function', 'B', TRUE),
(102, 'Variables defined outside a function are local to that function', 'C', FALSE),
(102, 'Variables inside a function cannot be accessed outside of it, but can be modified', 'D', FALSE),
(103, 'The program throws an error', 'A', TRUE),
(103, 'The function automatically discards the extra arguments', 'B', FALSE),
(103, 'The extra arguments are ignored', 'C', FALSE),
(103, 'The function will execute with no issues', 'D', FALSE),
(104, 'By declaring the variable outside the function', 'A', FALSE),
(104, 'By returning the value from another function', 'B', FALSE),
(104, 'By providing the value inside parentheses when calling the function', 'C', TRUE),
(104, 'By using the input() function', 'D', FALSE),
(105, 'To print the result of the function', 'A', FALSE),
(105, 'To exit the function and return a value to the caller', 'B', TRUE),
(105, 'To call another function', 'C', FALSE),
(105, 'To define the functions parameters', 'D', FALSE),
(106, 'The function will throw an error', 'A', FALSE),
(106, 'The parameter will be assigned the default value', 'B', TRUE),
(106, 'The function will use the argument passed for another parameter', 'C', FALSE),
(106, 'The function will use the default value but display a warning', 'D', FALSE),
(107, 'def my_function(*args):', 'A', TRUE),
(107, 'def my_function[args]:', 'B', FALSE),
(107, 'def my_function(args*):', 'C', FALSE),
(107, 'def my_function(args):', 'D', FALSE),
(108, 'def my_function(positional, *args, **kwargs):', 'A', TRUE),
(108, 'def my_function(*args, positional, **kwargs):', 'B', FALSE),
(108, 'def my_function(positional, **kwargs):', 'C', FALSE),
(108, 'def my_function(positional, args, kwargs):', 'D', FALSE),
(109, 'A sequence of text stored between quotation marks', 'A', TRUE),
(109, 'A list', 'B', FALSE),
(109, 'A decimal number', 'C', FALSE),
(109, 'A fraction', 'D', FALSE),
(110, 'By using quotation marks', 'A', TRUE),
(110, 'By using the hash symbol', 'B', FALSE),
(110, 'By using forward slashes', 'C', FALSE),
(110, 'By just writing plain text with no denominators', 'D', FALSE),
(111, 'A built-in function that performs a task', 'A', TRUE),
(111, 'A loop', 'B', FALSE),
(111, 'A built-in calculator', 'C', FALSE),
(111, 'A keyboard specific to Python', 'D', FALSE),
(112, 'The function name and then open and closed parentheses, e.g. random()', 'A', TRUE),
(112, 'The function name, e.g. random', 'B', FALSE),
(112, 'The function name in capitals, e.g. RANDOM', 'C', FALSE),
(112, 'The function name in capitals with the hash mark, e.g. RANDOM#', 'D', FALSE),
(113, 'INCORRECT', 'A', FALSE),
(113, 'TRUE', 'B', TRUE),
(113, 'WRONG', 'C', FALSE),
(113, 'CORRECT', 'D', FALSE),
(114, 'A number stored in decimal format', 'A', TRUE),
(114, 'Any number not divisible by 5', 'B', FALSE),
(114, 'A string of numbers', 'C', FALSE),
(114, 'An inbuilt python module that determines if an item is denser than water based on weight', 'D', FALSE),
(115, '76', 'A', FALSE),
(115, '7.6', 'B', TRUE),
(115, '0007.600', 'C', FALSE),
(115, '7#6', 'D', FALSE),
(116, '1 (TRUE)', 'A', FALSE),
(116, '2 (TRUE and FALSE)', 'B', TRUE),
(116, '3 (TRUE and FALSE and BOTH)', 'C', FALSE),
(116, '4 (TRUE and FALSE and NULL and BOTH)', 'D', FALSE),
(117, 'float()', 'C', TRUE),
(117, 'int()', 'A', FALSE),
(117, 'str()', 'B', FALSE),
(117, 'input()', 'D', FALSE),
(118, 'float', 'B', TRUE),
(118, 'int', 'A', FALSE),
(118, 'string', 'C', FALSE),
(118, 'boolean', 'D', FALSE),
(119, 'A string that looks like a number', 'D', TRUE),
(119, 'Any string', 'A', FALSE),
(119, 'A boolean value', 'B', FALSE),
(119, 'A float value', 'C', FALSE),
(120, '"42"', 'A', TRUE),
(120, '"3.14"', 'B', FALSE),
(120, '"hello"', 'C', FALSE),
(120, '"7.0"', 'D', FALSE),
(121, 'Displays output to the screen', 'B', TRUE),
(121, 'Saves data to a file', 'A', FALSE),
(121, 'Reads user input', 'C', FALSE),
(121, 'Converts strings to numbers', 'D', FALSE),
(122, 'Text to be displayed', 'A', TRUE),
(122, 'Comments', 'C', FALSE),
(122, 'Variables', 'B', FALSE),
(122, 'Functions', 'D', FALSE),
(123, 'Moves output to a new line', 'D', TRUE),
(123, 'Deletes the line', 'A', FALSE),
(123, 'Adds spaces', 'B', FALSE),
(123, 'Repeats the text', 'C', FALSE),
(124, 'print("Hello")', 'A', TRUE),
(124, 'print = "Hello"', 'B', FALSE),
(124, 'print "Hello"', 'C', FALSE),
(124, 'echo("Hello")', 'D', FALSE),
(125, '==', 'B', TRUE),
(125, '+', 'A', FALSE),
(125, '*', 'C', FALSE),
(125, '=', 'D', FALSE),
(126, 'True', 'D', TRUE),
(126, 'False', 'A', FALSE),
(126, 'None', 'B', FALSE),
(126, 'Error', 'C', FALSE),
(127, 'or', 'C', TRUE),
(127, '||', 'B', FALSE),
(127, 'and', 'A', FALSE),
(127, '&', 'D', FALSE),
(128, 'Boolean', 'A', TRUE),
(128, 'String', 'B', FALSE),
(128, 'Integer', 'C', FALSE),
(128, 'Float', 'D', FALSE),
(129, 'By operator precedence rules', 'B', TRUE),
(129, 'From left to right always', 'A', FALSE),
(129, 'In random order', 'C', FALSE),
(129, 'Depends on variable names', 'D', FALSE),
(130, 'Addition', 'D', TRUE),
(130, 'Multiplication', 'B', FALSE),
(130, 'Exponentiation', 'C', FALSE),
(130, 'Division', 'A', FALSE),
(131, 'By using parentheses', 'A', TRUE),
(131, 'By writing comments', 'B', FALSE),
(131, 'By using semicolons', 'C', FALSE),
(131, 'By using quotation marks', 'D', FALSE),
(132, 'The expression in parentheses', 'C', TRUE),
(132, 'Addition', 'A', FALSE),
(132, 'Multiplication', 'B', FALSE),
(132, 'Division', 'D', FALSE),
(133, 'Repeats the string multiple times', 'B', TRUE),
(133, 'Reverses the string', 'A', FALSE),
(133, 'Removes spaces from the string', 'C', FALSE),
(133, 'Capitalizes the string', 'D', FALSE),
(134, '"abc" + 2', 'D', TRUE),
(134, '"abc" * 3', 'B', FALSE),
(134, '3 * "a"', 'C', FALSE),
(134, '"a" * 1', 'A', FALSE),
(135, '+', 'A', TRUE),
(135, '&', 'C', FALSE),
(135, '*', 'B', FALSE),
(135, '#', 'D', FALSE),
(136, 'They are joined into one string', 'C', TRUE),
(136, 'An error occurs', 'A', FALSE),
(136, 'They are converted to numbers', 'B', FALSE),
(136, 'They are printed automatically', 'D', FALSE),
(137, '1', 'B', TRUE),
(137, '0', 'C', FALSE),
(137, '2', 'A', FALSE),
(137, '-1', 'D', FALSE),
(138, 'Extracts a portion of the string', 'A', TRUE),
(138, 'Deletes characters', 'B', FALSE),
(138, 'Capitalizes the string', 'C', FALSE),
(138, 'Adds spaces to the string', 'D', FALSE),
(139, '-1', 'C', TRUE),
(139, '0', 'A', FALSE),
(139, '1', 'B', FALSE),
(139, 'len(string)', 'D', FALSE),
(140, '"thon"', 'D', TRUE),
(140, '"Pyt"', 'A', FALSE),
(140, '"yth"', 'B', FALSE),
(140, '"on"', 'C', FALSE),
(141, 'Replaces parts of the string with another string', 'B', TRUE),
(141, 'Checks if the string contains only digits', 'A', FALSE),
(141, 'Converts the string to uppercase', 'C', FALSE),
(141, 'Removes whitespace from the string', 'D', FALSE),
(142, 'Checks if the string starts with a specified substring', 'A', TRUE),
(142, 'Converts the string to lowercase', 'C', FALSE),
(142, 'Removes characters from the start of the string', 'B', FALSE),
(142, 'Checks if the string ends with a specified substring', 'D', FALSE),
(143, 'Returns False because string contains letters', 'D', TRUE),
(143, 'Returns True because all characters are digits', 'A', FALSE),
(143, 'Returns True because string contains letters and digits', 'B', FALSE),
(143, 'Returns False because string contains digits', 'C', FALSE),
(144, 'lower()', 'C', TRUE),
(144, 'upper()', 'B', FALSE),
(144, 'capitalize()', 'D', FALSE),
(144, 'strip()', 'A', FALSE),
(145, 'Executes if no previous if or elif conditions were true', 'C', TRUE),
(145, 'Executes only if the first if is true', 'B', FALSE),
(145, 'Repeats the if condition', 'A', FALSE),
(145, 'Ends the conditional', 'D', FALSE),
(146, 'if x == 10:', 'B', TRUE),
(146, 'if x = 10:', 'C', FALSE),
(146, 'if (x == 10)', 'D', FALSE),
(146, 'if x := 10:', 'A', FALSE),
(147, 'Yes, multiple elifs are allowed', 'D', TRUE),
(147, 'No, only one elif is allowed', 'B', FALSE),
(147, 'Yes, but only two elifs', 'C', FALSE),
(147, 'No, elif is not a Python keyword', 'A', FALSE),
(148, 'The code inside the if block is skipped', 'A', TRUE),
(148, 'The program crashes', 'B', FALSE),
(148, 'An error is raised', 'C', FALSE),
(148, 'The else block executes', 'D', FALSE),
(149, 'They allow making more detailed decisions', 'D', TRUE),
(149, 'They make the code slower', 'A', FALSE),
(149, 'They remove the need for else statements', 'B', FALSE),
(149, 'They simplify code by removing all conditions', 'C', FALSE),
(150, 'Yes, proper indentation is required', 'B', TRUE),
(150, 'No, indentation does not matter', 'D', FALSE),
(150, 'Indentation is only needed for functions', 'A', FALSE),
(150, 'Indentation is optional inside loops', 'C', FALSE),
(151, 'if statements can be nested inside others', 'A', TRUE),
(151, 'for statements', 'B', FALSE),
(151, 'while statements', 'D', FALSE),
(151, 'def statements', 'C', FALSE),
(152, 'Yes, sometimes they can be simplified using logical operators', 'C', TRUE),
(152, 'No, they can never be replaced', 'B', FALSE),
(152, 'Yes, but only for single-level if statements', 'A', FALSE),
(152, 'No, logical operators are unrelated', 'D', FALSE),
(153, 'The loop body does not execute at all', 'C', TRUE),
(153, 'The loop executes once', 'A', FALSE),
(153, 'The loop runs infinitely', 'B', FALSE),
(153, 'An error occurs', 'D', FALSE),
(154, 'By changing the condition or using break statements', 'A', TRUE),
(154, 'By never changing the condition', 'D', FALSE),
(154, 'By using continue', 'B', FALSE),
(154, 'By making the condition always True', 'C', FALSE),
(155, 'Skips the rest of the loop body and continues with the next iteration', 'D', TRUE),
(155, 'Exits the loop immediately', 'A', FALSE),
(155, 'Stops the program', 'B', FALSE),
(155, 'Does nothing', 'C', FALSE),
(156, 'Forgetting to update the loop condition can cause infinite loops', 'B', TRUE),
(156, 'Using a break statement', 'D', FALSE),
(156, 'Using a continue statement', 'C', FALSE),
(156, 'Starting the loop with False condition', 'A', FALSE),
(157, 'By iterating over keys, values, or key-value pairs', 'A', TRUE),
(157, 'By converting it to a list', 'B', FALSE),
(157, 'By using while loops only', 'C', FALSE),
(157, 'By calling dict() inside the loop', 'D', FALSE),
(158, 'It creates a sequence starting at the first argument and ending before the second', 'D', TRUE),
(158, 'It returns a list of random numbers', 'A', FALSE),
(158, 'It generates a single number', 'B', FALSE),
(158, 'It produces a string sequence', 'C', FALSE),
(159, 'Yes, strings are iterable', 'B', TRUE),
(159, 'No, strings cannot be iterated', 'D', FALSE),
(159, 'Only for loops with range can iterate strings', 'A', FALSE),
(159, 'Only while loops can iterate strings', 'C', FALSE),
(160, 'Using enumerate() gives both index and value', 'C', TRUE),
(160, 'Using range(len(list)) only', 'B', FALSE),
(160, 'Using while loops only', 'A', FALSE),
(160, 'Using for loops without index', 'D', FALSE),
(161, 'It exits only the innermost loop', 'D', TRUE),
(161, 'It exits all loops immediately', 'A', FALSE),
(161, 'It pauses the loop', 'B', FALSE),
(161, 'It skips the current iteration', 'C', FALSE),
(162, 'The loop ends after that iteration', 'B', TRUE),
(162, 'The loop restarts', 'C', FALSE),
(162, 'The program crashes', 'D', FALSE),
(162, 'Nothing happens', 'A', FALSE),
(163, 'To act as a placeholder where code will be added later', 'A', TRUE),
(163, 'To exit a loop early', 'B', FALSE),
(163, 'To continue the loop', 'C', FALSE),
(163, 'To skip loop iterations', 'D', FALSE),
(164, 'The pass statement', 'C', TRUE),
(164, 'The break statement', 'B', FALSE),
(164, 'The continue statement', 'D', FALSE),
(164, 'The return statement', 'A', FALSE),
(165, 'With a docstring inside triple quotes', 'A', TRUE),
(165, 'Using // comments', 'D', FALSE),
(165, 'Using # comments', 'B', FALSE),
(165, 'By writing comments outside the function', 'C', FALSE),
(166, 'Yes, by returning a tuple', 'C', TRUE),
(166, 'No, only one value can be returned', 'A', FALSE),
(166, 'Yes, by returning a list', 'B', FALSE),
(166, 'No, functions cannot return values', 'D', FALSE),
(167, 'The function can still be called but does not use parameters', 'D', TRUE),
(167, 'It causes an error', 'B', FALSE),
(167, 'The function returns None', 'A', FALSE),
(167, 'The function executes only once', 'C', FALSE),
(168, 'By specifying parameter names during the call', 'B', TRUE),
(168, 'By only using positional arguments', 'A', FALSE),
(168, 'By calling the function without parentheses', 'C', FALSE),
(168, 'By using the global keyword', 'D', FALSE),
(169, 'It is local to the function', 'B', TRUE),
(169, 'It is global', 'A', FALSE),
(169, 'It is accessible outside the function', 'C', FALSE),
(169, 'It is accessible only in loops', 'D', FALSE),
(170, 'Using the global keyword', 'A', TRUE),
(170, 'Using the local keyword', 'B', FALSE),
(170, 'Using the nonlocal keyword', 'D', FALSE),
(170, 'Using the def keyword', 'C', FALSE),
(171, 'Yes, but they refer to different variables', 'D', TRUE),
(171, 'No, names must be unique', 'B', FALSE),
(171, 'Yes, and they refer to the same variable', 'A', FALSE),
(171, 'No, Python disallows this', 'C', FALSE),
(172, 'It allows modifying variables in an enclosing non-global scope', 'C', TRUE),
(172, 'It declares global variables', 'A', FALSE),
(172, 'It deletes variables', 'B', FALSE),
(172, 'It creates local variables', 'D', FALSE),
(173, 'length(my_list)', 'C', FALSE),
(173, 'count(my_list)', 'B', FALSE),
(173, 'len(my_list)', 'A', TRUE),
(173, 'my_list.len()', 'D', FALSE),
(174, 'my_list.insert(index, item)', 'D', TRUE),
(174, 'my_list.add(item, index)', 'C', FALSE),
(174, 'insert(my_list, index, item)', 'A', FALSE),
(174, 'my_list.append_at()', 'B', FALSE),
(175, 'The first item in the list', 'A', FALSE),
(175, 'An index error', 'C', FALSE),
(175, 'The last item in the list', 'B', TRUE),
(175, 'All items in reverse', 'D', FALSE),
(177, 'loop()', 'B', FALSE),
(177, 'enumerate()', 'A', TRUE),
(177, 'index()', 'D', FALSE),
(177, 'range()', 'C', FALSE),
(178, 'Using range(len(list))', 'B', FALSE),
(178, 'Using list.index()', 'D', FALSE),
(178, 'Using enumerate()', 'A', TRUE),
(178, 'Using zip()', 'C', FALSE),
(179, '[0, 1, 2, 3, 4]', 'C', TRUE),
(179, '[1, 2, 3, 4, 5]', 'D', FALSE),
(179, '(0, 5)', 'A', FALSE),
(179, 'A single value: 5', 'B', FALSE),
(180, 'To repeat code for each item in a sequence', 'B', TRUE),
(180, 'To create variables', 'D', FALSE),
(180, 'To define constants', 'A', FALSE),
(180, 'To exit programs', 'C', FALSE),
(181, 'remove()', 'A', FALSE),
(181, 'pop()', 'C', TRUE),
(181, 'drop()', 'B', FALSE),
(181, 'cut()', 'D', FALSE),
(182, 'Sorts the list', 'B', FALSE),
(182, 'Deletes the last item', 'A', FALSE),
(182, 'Reverses the list in place', 'C', TRUE),
(182, 'Duplicates the list', 'D', FALSE),
(183, 'repeat()', 'A', FALSE),
(183, 'count()', 'B', TRUE),
(183, 'index()', 'D', FALSE),
(183, 'find()', 'C', FALSE),
(184, 'Adds another list to the end', 'D', TRUE),
(184, 'Replaces the list', 'C', FALSE),
(184, 'Clears the list', 'A', FALSE),
(184, 'Adds one item only', 'B', FALSE),
(185, 'isdisjoint()', 'C', TRUE),
(185, 'hasnone()', 'B', FALSE),
(185, 'clear()', 'A', FALSE),
(185, 'exclusive()', 'D', FALSE),
(186, 'Removes all items from a set', 'D', FALSE),
(186, 'Creates a copy of the set', 'B', FALSE),
(186, 'Keeps only common elements in the set', 'A', TRUE),
(186, 'Swaps two sets', 'C', FALSE),
(187, '|', 'A', TRUE),
(187, '&', 'C', FALSE),
(187, '^', 'D', FALSE),
(187, '-', 'B', FALSE),
(188, 'Convert the list to a set', 'B', TRUE),
(188, 'Use list.pop()', 'C', FALSE),
(188, 'Use list.remove()', 'D', FALSE),
(188, 'Use list.count()', 'A', FALSE),
(189, 'list', 'A', FALSE),
(189, 'dictionary', 'B', TRUE),
(189, 'set', 'D', FALSE),
(189, 'tuple', 'C', FALSE),
(190, 'tuple', 'A', TRUE),
(190, 'set', 'C', FALSE),
(190, 'dictionary', 'D', FALSE),
(190, 'list', 'B', FALSE),
(191, 'set', 'B', TRUE),
(191, 'list', 'C', FALSE),
(191, 'tuple', 'D', FALSE),
(191, 'dictionary', 'A', FALSE),
(192, 'dictionary', 'D', TRUE),
(192, 'set', 'C', FALSE),
(192, 'tuple', 'B', FALSE),
(192, 'frozenset', 'A', FALSE),
(193, 'my_dict.keys()', 'A', TRUE),
(193, 'my_dict.getkeys()', 'B', FALSE),
(193, 'keys(my_dict)', 'C', FALSE),
(193, 'my_dict.all()', 'D', FALSE),
(194, 'Returns None', 'B', FALSE),
(194, 'Raises a KeyError', 'A', TRUE),
(194, 'Adds the key automatically', 'C', FALSE),
(194, 'Returns 0', 'D', FALSE),
(195, 'my_dict.get("key")', 'C', TRUE),
(195, 'my_dict.fetch("key")', 'D', FALSE),
(195, 'my_dict.key', 'B', FALSE),
(195, 'my_dict["key"]', 'A', FALSE),
(196, '"key" in my_dict', 'A', TRUE),
(196, 'my_dict.contains("key")', 'B', FALSE),
(196, 'my_dict.has("key")', 'D', FALSE),
(196, 'find(my_dict, "key")', 'C', FALSE),
(197, 'clear()', 'B', TRUE),
(197, 'empty()', 'A', FALSE),
(197, 'remove_all()', 'C', FALSE),
(197, 'pop_all()', 'D', FALSE),
(198, 'my_dict["key"] = new_value', 'C', TRUE),
(198, 'my_dict.change("key", new_value)', 'B', FALSE),
(198, 'update(my_dict)', 'A', FALSE),
(198, 'my_dict.append("key", new_value)', 'D', FALSE),
(199, 'Adds the key if not present', 'D', TRUE),
(199, 'Always creates a new key', 'B', FALSE),
(199, 'Deletes the key', 'C', FALSE),
(199, 'Sorts the dictionary', 'A', FALSE),
(200, 'del my_dict["key"]', 'A', TRUE),
(200, 'delete my_dict["key"]', 'C', FALSE),
(200, 'remove(my_dict["key"])', 'B', FALSE),
(200, 'erase(my_dict, "key")', 'D', FALSE),
(201, 'for k, v in my_dict.items()', 'C', TRUE),
(201, 'for k in my_dict()', 'D', FALSE),
(201, 'for item in my_dict.get()', 'B', FALSE),
(201, 'for key, val in my_dict.pairs()', 'A', FALSE),
(202, 'my_dict.keys()', 'A', TRUE),
(202, 'my_dict.getkeys()', 'D', FALSE),
(202, 'keys(my_dict)', 'B', FALSE),
(202, 'my_dict.list()', 'C', FALSE),
(203, 'for i, key in enumerate(my_dict)', 'C', TRUE),
(203, 'for i in my_dict.keys()', 'A', FALSE),
(203, 'for key in list(my_dict)', 'B', FALSE),
(203, 'for item in my_dict.items()', 'D', FALSE),
(204, 'for value in my_list:', 'A', TRUE),
(204, 'for i in range(len(my_list)):', 'B', FALSE),
(204, 'while i < len(my_list):', 'C', FALSE),
(204, 'loop over index values only', 'D', FALSE),
(205, 'A named block of code that performs a task.', 'A', TRUE),
(205, 'A type of variable.', 'B', FALSE),
(205, 'A loop structure.', 'C', FALSE),
(205, 'A comment in Python.', 'D', FALSE),
(206, 'def', 'A', TRUE),
(206, 'func', 'B', FALSE),
(206, 'function', 'C', FALSE),
(206, 'define', 'D', FALSE),
(207, 'To specify the value a function gives back.', 'A', TRUE),
(207, 'To pause the function.', 'B', FALSE),
(207, 'To start a loop.', 'C', FALSE),
(207, 'To print output to the screen.', 'D', FALSE),
(208, 'It returns None by default.', 'A', TRUE),
(208, 'It returns an error.', 'B', FALSE),
(208, 'It exits the program.', 'C', FALSE),
(208, 'It runs forever.', 'D', FALSE),
(209, 'The loop will run forever and never stop.', 'A', TRUE),
(209, 'The loop will skip to the next iteration.', 'B', FALSE),
(209, 'The loop will exit after one iteration.', 'C', FALSE),
(209, 'The loop will throw a syntax error.', 'D', FALSE),
(210, 'A loop that never ends unless externally stopped.', 'A', TRUE),
(210, 'A loop that runs for a fixed number of times.', 'B', FALSE),
(210, 'A loop that skips its body.', 'C', FALSE),
(210, 'A loop that breaks on the first run.', 'D', FALSE),
(211, 'for loop', 'A', TRUE),
(211, 'while loop', 'B', FALSE),
(211, 'if statement', 'C', FALSE),
(211, 'try-except block', 'D', FALSE),
(212, 'break', 'A', TRUE),
(212, 'continue', 'B', FALSE),
(212, 'pass', 'C', FALSE),
(212, 'next', 'D', FALSE),
(213, 'A concise way to create lists using a single line of code.', 'A', TRUE),
(213, 'A tool for debugging lists.', 'B', FALSE),
(213, 'A way to compress list values.', 'C', FALSE),
(213, 'A function to flatten nested lists.', 'D', FALSE),
(214, '[x for x in range(5)]', 'A', TRUE),
(214, '[range(x) for x in 5]', 'B', FALSE),
(214, '(x for x in range(5))', 'C', FALSE),
(214, '{x: x for x in range(5)}', 'D', FALSE),
(215, 'A list containing 0, 1, and 2.', 'A', TRUE),
(215, 'A list containing 1, 2, and 3.', 'B', FALSE),
(215, 'An empty list.', 'C', FALSE),
(215, 'An error message.', 'D', FALSE),
(216, 'They are more concise and readable than loops.', 'A', TRUE),
(216, 'They always run faster than loops.', 'B', FALSE),
(216, 'They are easier to debug than regular loops.', 'C', FALSE),
(216, 'They can only be used with strings.', 'D', FALSE);

-- example query, get all questions and their answers for a level
SELECT q.questionID, q.question, a.answer_character, a.answer, a.correct
FROM Questions q
JOIN Answers a ON q.questionID = a.questionID
JOIN Levels l ON q.levelID = l.levelID
WHERE l.level = 'Intro to Python';